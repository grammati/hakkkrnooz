<html><head><link rel="stylesheet" type="text/css" href="http://ycombinator.com/news.css">
<link rel="shortcut icon" href="http://ycombinator.com/favicon.ico">
<script>
function byId(id) {
  return document.getElementById(id);
}

function vote(node) {
  var v = node.id.split(/_/);   // {'up', '123'}
  var item = v[1]; 

  // hide arrows
  byId('up_'   + item).style.visibility = 'hidden';
  byId('down_' + item).style.visibility = 'hidden';

  // ping server
  var ping = new Image();
  ping.src = node.href;

  return false; // cancel browser nav
} </script><title>A primer on Python decorators | Hacker News</title></head><body><center><table border=0 cellpadding=0 cellspacing=0 width="85%" bgcolor=#f6f6ef><tr><td bgcolor=#ff6600><table border=0 cellpadding=0 cellspacing=0 width="100%" style="padding:2px"><tr><td style="width:18px;padding-right:4px"><a href="http://ycombinator.com"><img src="http://ycombinator.com/images/y18.gif" width=18 height=18 style="border:1px #ffffff solid;"></img></a></td><td style="line-height:12pt; height:10px;"><span class="pagetop"><b><a href="news">Hacker News</a></b><img src="http://ycombinator.com/images/s.gif" height=1 width=10><a href="newest">new</a> | <a href="newcomments">comments</a> | <a href="ask">ask</a> | <a href="jobs">jobs</a> | <a href="submit">submit</a></span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop"><a href="newslogin?whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">login</a></span></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><table border=0><tr><td><center><a id=up_3830185 href="vote?for=3830185&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830185></span></center></td><td class="title"><a href="http://www.thumbtack.com/engineering/a-primer-on-python-decorators/">A primer on Python decorators</a><span class="comhead"> (thumbtack.com) </span></td></tr><tr><td colspan=1></td><td class="subtext"><span id=score_3830185>142 points</span> by <a href="user?id=midas">midas</a> 11 hours ago  | <a href="item?id=3830185">32 comments</a></td></tr><tr style="height:10px"></tr><tr><td></td><td><form method=post action="/r"><input type=hidden name="fnid" value="mWPLeVSdjb"><textarea name="text" rows=6 cols=60></textarea><br><br>
<input type=submit value="add comment"></form></td></tr></table><br><br>
<table border=0><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830326 href="vote?for=3830326&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830326></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=lhnz">lhnz</a> 10 hours ago  | <a href="item?id=3830326">link</a></span></div><br>
<span class="comment"><font color=#000000>What I really want to know is how a framework such as Flask uses a decorator for the route. How is the correct function picked for a particular route that is defined against the decorator? (Maybe I'm completely misunderstanding this...)</font></span><p><font size=1><u><a href="reply?id=3830326&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830331 href="vote?for=3830331&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830331></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=axiak">axiak</a> 10 hours ago  | <a href="item?id=3830331">link</a></span></div><br>
<span class="comment"><font color=#000000>The decorator can do anything. In flask the decorator syntax is just shorthand for adding the route to a registry which is looked up every request.<p>The source code is pitifully small: <a href="https://bitbucket.org/mitsuhiko/flask/src/4d82231621fc/flask.py#cl-636" rel="nofollow">https://bitbucket.org/mitsuhiko/flask/src/4d82231621fc/flask...</a></font></span><p><font size=1><u><a href="reply?id=3830331&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830618 href="vote?for=3830618&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830618></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gostevehoward">gostevehoward</a> 8 hours ago  | <a href="item?id=3830618">link</a></span></div><br>
<span class="comment"><font color=#000000>Some might say it's a dangerous abuse of decorators.<p>Since decorators (generally) run at module load time, any stateful decorator (usually) implies the use of global mutable state, which is (considered by many to be) the root cause of much bad design, convoluted flow, limited reusability and untestability. This is perhaps why most decorators in the standard library are pure (off the top of my head).<p>This is well beyond the scope of the post but an important and often overlooked point in my opinion.</font></span><p><font size=1><u><a href="reply?id=3830618&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3830630 href="vote?for=3830630&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830630></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=axiak">axiak</a> 8 hours ago  | <a href="item?id=3830630">link</a></span></div><br>
<span class="comment"><font color=#000000>In flask, the app.route decorator mutates the app object. There are no globals necessary. Use of globals to maintain state is an orthogonal issue to use of decorators to update registries.</font></span><p><font size=1><u><a href="reply?id=3830630&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3830650 href="vote?for=3830650&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830650></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gostevehoward">gostevehoward</a> 8 hours ago  | <a href="item?id=3830650">link</a></span></div><br>
<span class="comment"><font color=#000000>Well either the app object is global, in which case you've got global mutable state, or you're defining your handler functions later than module load time, which is pretty uncommon practice.</font></span><p><font size=1><u><a href="reply?id=3830650&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3831023 href="vote?for=3831023&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831023></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=wahnfrieden">wahnfrieden</a> 6 hours ago  | <a href="item?id=3831023">link</a></span></div><br>
<span class="comment"><font color=#000000>You can use the return value of some function as a decorator, as a way to avoid global state and tie the decorator to a given instance of your routing object. (I don't know flask, but this isn't a limitation of python)</font></span><p><font size=1><u><a href="reply?id=3831023&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830351 href="vote?for=3830351&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830351></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=enaeseth">enaeseth</a> 10 hours ago  | <a href="item?id=3830351">link</a></span></div><br>
<span class="comment"><font color=#000000>Here's the source of Flask's `route` decorator:<p><a href="https://github.com/mitsuhiko/flask/blob/master/flask/app.py#L921" rel="nofollow">https://github.com/mitsuhiko/flask/blob/master/flask/app.py#...</a><p>When you call `route` with a URL pattern, it returns an inner function which is used as the decorator. That decorator just records your route and function in the Flask URL map, and returns your function unchanged.<p>So, Flask is arguably perpetuating a slight abuse of decorators, since it doesn't decorate or wrap your function at all, but merely saves a reference to it somewhere. But it's a fairly clean way to make up for the lack of code blocks or multi-statement anonymous functions in Python.</font></span><p><font size=1><u><a href="reply?id=3830351&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830333 href="vote?for=3830333&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830333></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=wahnfrieden">wahnfrieden</a> 10 hours ago  | <a href="item?id=3830333">link</a></span></div><br>
<span class="comment"><font color=#000000>Calling a decorator can mutate some shared state.</font></span><p><font size=1><u><a href="reply?id=3830333&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3831338 href="vote?for=3831338&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831338></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=steamboiler">steamboiler</a> 3 hours ago  | <a href="item?id=3831338">link</a></span></div><br>
<span class="comment"><font color=#000000>Nice description. I'd suggest explaining how decorators that accept arguments (i.e. @memcached('some-arg')) work lest it befuddle some beginner. It is not straightforward (the first argument of a decorator is the function being decorated).</font></span><p><font size=1><u><a href="reply?id=3831338&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830226 href="vote?for=3830226&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830226></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=DasIch">DasIch</a> 10 hours ago  | <a href="item?id=3830226">link</a></span></div><br>
<span class="comment"><font color=#000000>There is a small mistake in the post: decorators cannot be arbitrary expressions. Something like @Foo(spam).bar fails with an unhelpful SyntaxError, something that everyone who designs complex APIs will probably encounter at some point. This is a restriction which is in place because Guido didn't like arbitrary expressions as decorators.</font></span><p><font size=1><u><a href="reply?id=3830226&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830241 href="vote?for=3830241&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830241></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=enaeseth">enaeseth</a> 10 hours ago  | <a href="item?id=3830241">link</a></span></div><br>
<span class="comment"><font color=#000000>Oh, Guido. Thanks, I've updated the post.</font></span><p><font size=1><u><a href="reply?id=3830241&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830611 href="vote?for=3830611&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830611></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ceol">ceol</a> 8 hours ago  | <a href="item?id=3830611">link</a></span></div><br>
<span class="comment"><font color=#000000>For some reason, decorators didn't click for me until now. I've been parroting the standard decorator logic (e.g. returning a function) without knowing why.<p>Thanks!</font></span><p><font size=1><u><a href="reply?id=3830611&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830894 href="vote?for=3830894&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830894></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=stock_toaster">stock_toaster</a> 7 hours ago  | <a href="item?id=3830894">link</a></span></div><br>
<span class="comment"><font color=#000000>Nice description of method decorators. Didn't touch on class decorators, or decorators that can decorate both classes <i>and</i> methods (arguably very ugly wrapper functions that return decorators that decorate).</font></span><p><font size=1><u><a href="reply?id=3830894&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3831325 href="vote?for=3831325&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831325></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sudhirj">sudhirj</a> 3 hours ago  | <a href="item?id=3831325">link</a></span></div><br>
<span class="comment"><font color=#000000>Wrote a post a while ago that talks about them - <a href="http://hangar.runway7.net/decorators-wrappers-python" rel="nofollow">http://hangar.runway7.net/decorators-wrappers-python</a></font></span><p><font size=1><u><a href="reply?id=3831325&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830689 href="vote?for=3830689&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830689></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=simon_weber">simon_weber</a> 8 hours ago  | <a href="item?id=3830689">link</a></span></div><br>
<span class="comment"><font color=#000000>For those who prefer video, Dave Brondsema gave an excellent talk on decorators and custom context managers at PyCon: <a href="http://pyvideo.org/video/883/decorators-and-context-managers" rel="nofollow">http://pyvideo.org/video/883/decorators-and-context-managers</a>.</font></span><p><font size=1><u><a href="reply?id=3830689&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830401 href="vote?for=3830401&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830401></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jmurley">jmurley</a> 9 hours ago  | <a href="item?id=3830401">link</a></span></div><br>
<span class="comment"><font color=#000000>Thanks, but my favorite explanation of decorators is still this stackoverflow answer (see the second answer)<p><a href="http://stackoverflow.com/questions/739654/understanding-python-decorators" rel="nofollow">http://stackoverflow.com/questions/739654/understanding-pyth...</a></font></span><p><font size=1><u><a href="reply?id=3830401&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3831616 href="vote?for=3831616&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831616></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Aissen">Aissen</a> 1 hour ago  | <a href="item?id=3831616">link</a></span></div><br>
<span class="comment"><font color=#000000>Direct link: <a href="http://stackoverflow.com/a/1594484/378825" rel="nofollow">http://stackoverflow.com/a/1594484/378825</a></font></span><p><font size=1><u><a href="reply?id=3831616&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830493 href="vote?for=3830493&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830493></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ming-hack">ming-hack</a> 9 hours ago  | <a href="item?id=3830493">link</a></span></div><br>
<span class="comment"><font color=#5a5a5a>Yes, I think this post is more informative.</font></span><p><font size=1><u><a href="reply?id=3830493&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830471 href="vote?for=3830471&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830471></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gbog">gbog</a> 9 hours ago  | <a href="item?id=3830471">link</a></span></div><br>
<span class="comment"><font color=#000000>To authors: I would avoid try except in this code snippet, a simple if else is more explicit. I would also avoid a = b = c statement. One line per statement is better most of the time.</font></span><p><font size=1><u><a href="reply?id=3830471&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830573 href="vote?for=3830573&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830573></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=samdk">samdk</a> 9 hours ago  | <a href="item?id=3830573">link</a></span></div><br>
<span class="comment"><font color=#000000>The Python community generally advocates an "it's easier to ask for forgiveness than permission" coding style. When faced with a condition of the form "if condition a holds, do b, else c", it's very often a better idea to do "let's try b, and do c in case b fails because condition a didn't hold".<p>In this case it's better because you can avoid computing an extra hash of the object in cases where it's already a key of the dictionary. This may seem like a silly optimization, but it can very easily add up if you're accessing existing elements most of the time--I once had a bit of code that went 60x faster when I replaced an if-else with a try-except.<p>In other cases it can be even more beneficial. Say you're opening a file. One approach to avoid errors would be to check if a file exists first. This is error-prone because the file might cease to exist in between the 'if' and the 'open' statements, and now you have no code written to handle the error. Using try-except will ensure that you actually handle the error intelligently.<p>This isn't to say there's never a good reason to use an 'if' to check things, just that if you can do it in one step instead of two, one is usually better.</font></span><p><font size=1><u><a href="reply?id=3830573&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3831003 href="vote?for=3831003&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831003></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gbog">gbog</a> 6 hours ago  | <a href="item?id=3831003">link</a></span></div><br>
<span class="comment"><font color=#000000>Agree with that "try except" is better than "if else" for file handling ("with" is even better).<p>I am not sure if "try except" is really faster than "if else" in some edge cases in a memoization context, as you claim.<p>What I am sure is that in a didactic context, where you want people to understand code, something like:<p><pre><code>    if args not in stored_results:
        stored_results[args] = fn(*args)

    return stored_results[args]
</code></pre>
is much better than that (from the OP):<p><pre><code>    try:
        # try to get the cached result
        return stored_results[args]
    except KeyError:
        # nothing was cached for those args. let's fix that.
        result = stored_results[args] = fn(*args)
        return result</code></pre></font></span><p><font size=1><u><a href="reply?id=3831003&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3831176 href="vote?for=3831176&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831176></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jmlane">jmlane</a> 4 hours ago  | <a href="item?id=3831176">link</a></span></div><br>
<span class="comment"><font color=#000000>Out of curiosity, in a situation where you are doing negligible condition testing, is try–except still considered "more performant" than if–else flow control? For some reason (and I'm going to do so reading to get clarity on this point), I have had the silly notion that throwing and handling exceptions can be costly.</font></span><p><font size=1><u><a href="reply?id=3831176&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3831378 href="vote?for=3831378&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831378></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sateesh">sateesh</a> 3 hours ago  | <a href="item?id=3831378">link</a></span></div><br>
<span class="comment"><font color=#000000>I don't think the try-except is 'more performant'. At least from the below benchmark test it doesn't seem to be so.<p><pre><code>  &#62;&#62;&#62; from timeit import timeit
  &#62;&#62;&#62; timeit(setup='x=dict([(i,i*2) for i in range(10)])',stmt=
       """
          if 20 in x:
             pass""")

  0.07420943164572691

  &#62;&#62;&#62; timeit(setup='x=dict([(i,i*2) for i in range(10)])',
       stmt="""
               try:
		  x[20]
               except KeyError:
		  pass""")

  1.1514457843105674</code></pre></font></span><p><font size=1><u><a href="reply?id=3831378&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830457 href="vote?for=3830457&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830457></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=oberon">oberon</a> 9 hours ago  | <a href="item?id=3830457">link</a></span></div><br>
<span class="comment"><font color=#000000>For an interesting use of Python decorators - event handling - have a look at Decovent on pypi
<a href="http://pypi.python.org/pypi/Decovent" rel="nofollow">http://pypi.python.org/pypi/Decovent</a>.</font></span><p><font size=1><u><a href="reply?id=3830457&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830615 href="vote?for=3830615&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830615></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=timClicks">timClicks</a> 8 hours ago  | <a href="item?id=3830615">link</a></span></div><br>
<span class="comment"><font color=#000000>This is similar to how Pyglet does things: <a href="http://pyglet.org/doc/programming_guide/hello_world.html" rel="nofollow">http://pyglet.org/doc/programming_guide/hello_world.html</a></font></span><p><font size=1><u><a href="reply?id=3830615&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830223 href="vote?for=3830223&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830223></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jdwhit2">jdwhit2</a> 10 hours ago  | <a href="item?id=3830223">link</a></span></div><br>
<span class="comment"><font color=#000000>Great primer, reading it gives a good sense for why the decorator syntax was made and the potential uses. Is this part of a wider series you are running?</font></span><p><font size=1><u><a href="reply?id=3830223&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830268 href="vote?for=3830268&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830268></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=enaeseth">enaeseth</a> 10 hours ago  | <a href="item?id=3830268">link</a></span></div><br>
<span class="comment"><font color=#000000>Thanks! It is indeed the first in a series of Python posts that will be on the Thumbtack engineering blog.</font></span><p><font size=1><u><a href="reply?id=3830268&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3830454 href="vote?for=3830454&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830454></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=zackattack">zackattack</a> 9 hours ago  | <a href="item?id=3830454">link</a></span></div><br>
<span class="comment"><font color=#5a5a5a>Can you please email all future posts to me? ;p zackster@gmail.com  -- I don't use RSS any more, and I'd hate to miss them.</font></span><p><font size=1><u><a href="reply?id=3830454&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830387 href="vote?for=3830387&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830387></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=emboss">emboss</a> 9 hours ago  | <a href="item?id=3830387">link</a></span></div><br>
<span class="comment"><font color=#000000>Minor nitpicking:<p>&#62; unlike in Java, you can also call a class method on an instance<p>It's possible in Java, too. It's just considered bad practice.<p>Still, a very nice read!</font></span><p><font size=1><u><a href="reply?id=3830387&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830487 href="vote?for=3830487&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830487></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gbog">gbog</a> 9 hours ago  | <a href="item?id=3830487">link</a></span></div><br>
<span class="comment"><font color=#000000>I'd say if you have to do that, it is most likely because you have a design problem somewhere. It is a code smell in Python as well.</font></span><p><font size=1><u><a href="reply?id=3830487&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830261 href="vote?for=3830261&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830261></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=kelvin0"><font color=#3c963c>kelvin0</font></a> 10 hours ago  | <a href="item?id=3830261">link</a></span></div><br>
<span class="comment"><font color=#000000>Love using Python, but still haven't got around to using decorators yet. I probably didn't understand the concept properly until now ...</font></span><p><font size=1><u><a href="reply?id=3830261&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3830443 href="vote?for=3830443&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830443></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=gbog">gbog</a> 9 hours ago  | <a href="item?id=3830443">link</a></span></div><br>
<span class="comment"><font color=#000000>You could say decorators are for the code that you want to put inside a function but that don't really belong to its logic. The memoization example shows that: if you have memoization logic inside the function it works but you should feel that there are two disjoint logics at works.</font></span><p><font size=1><u><a href="reply?id=3830443&whence=%69%74%65%6d%3f%69%64%3d%33%38%33%30%31%38%35">reply</a></u></font></td></tr></table></td></tr></table><br><br>
</td></tr><tr><td><img src="http://ycombinator.com/images/s.gif" height=10 width=0><table width="100%" cellspacing=0 cellpadding=1><tr><td bgcolor=#ff6600></td></tr></table><br>
<center><span class="yclinks"><a href="lists">Lists</a> | <a href="rss">RSS</a> | <a href="http://ycombinator.com/bookmarklet.html">Bookmarklet</a> | <a href="http://ycombinator.com/newsguidelines.html">Guidelines</a> | <a href="http://ycombinator.com/newsfaq.html">FAQ</a> | <a href="http://ycombinator.com/newsnews.html">News News</a> | <a href="item?id=363">Feature Requests</a> | <a href="http://ycombinator.com">Y Combinator</a> | <a href="http://ycombinator.com/apply.html">Apply</a> | <a href="http://ycombinator.com/lib.html">Library</a></span><br><br>
<form method=get action="http://www.hnsearch.com/search#request/all">Search: <input type=text name="q" value="" size=17></form><br>
</center></td></tr></table></center></body></html>