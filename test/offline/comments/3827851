<html><head><link rel="stylesheet" type="text/css" href="http://ycombinator.com/news.css">
<link rel="shortcut icon" href="http://ycombinator.com/favicon.ico">
<script>
function byId(id) {
  return document.getElementById(id);
}

function vote(node) {
  var v = node.id.split(/_/);   // {'up', '123'}
  var item = v[1]; 

  // hide arrows
  byId('up_'   + item).style.visibility = 'hidden';
  byId('down_' + item).style.visibility = 'hidden';

  // ping server
  var ping = new Image();
  ping.src = node.href;

  return false; // cancel browser nav
} </script><title>How a computer boots up | Hacker News</title></head><body><center><table border=0 cellpadding=0 cellspacing=0 width="85%" bgcolor=#f6f6ef><tr><td bgcolor=#ff6600><table border=0 cellpadding=0 cellspacing=0 width="100%" style="padding:2px"><tr><td style="width:18px;padding-right:4px"><a href="http://ycombinator.com"><img src="http://ycombinator.com/images/y18.gif" width=18 height=18 style="border:1px #ffffff solid;"></img></a></td><td style="line-height:12pt; height:10px;"><span class="pagetop"><b><a href="news">Hacker News</a></b><img src="http://ycombinator.com/images/s.gif" height=1 width=10><a href="newest">new</a> | <a href="newcomments">comments</a> | <a href="ask">ask</a> | <a href="jobs">jobs</a> | <a href="submit">submit</a></span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop"><a href="newslogin?whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">login</a></span></td></tr></table></td></tr><tr style="height:10px"></tr><tr><td><table border=0><tr><td><center><a id=up_3827851 href="vote?for=3827851&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3827851></span></center></td><td class="title"><a href="http://duartes.org/gustavo/blog/post/how-computers-boot-up">How a computer boots up</a><span class="comhead"> (duartes.org) </span></td></tr><tr><td colspan=1></td><td class="subtext"><span id=score_3827851>214 points</span> by <a href="user?id=randhckr">randhckr</a> 19 hours ago  | <a href="item?id=3827851">34 comments</a></td></tr><tr style="height:10px"></tr><tr><td></td><td><form method=post action="/r"><input type=hidden name="fnid" value="FDaquFTQD1"><textarea name="text" rows=6 cols=60></textarea><br><br>
<input type=submit value="add comment"></form></td></tr></table><br><br>
<table border=0><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3828066 href="vote?for=3828066&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828066></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=scott_s">scott_s</a> 18 hours ago  | <a href="item?id=3828066">link</a></span></div><br>
<span class="comment"><font color=#000000>Back in grad school, I put together a presentation that talks about the boot process for a Linux machine, with a focus on what happens after the kernel takes over: <a href="http://people.cs.vt.edu/~scschnei/papers/boot_2up.pdf" rel="nofollow">http://people.cs.vt.edu/~scschnei/papers/boot_2up.pdf</a></font></span><p><font size=1><u><a href="reply?id=3828066&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3828392 href="vote?for=3828392&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828392></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sounds">sounds</a> 17 hours ago  | <a href="item?id=3828392">link</a></span></div><br>
<span class="comment"><font color=#000000>Nice article/blog post from 2008. If you want to keep reading, the next article is <a href="http://duartes.org/gustavo/blog/post/kernel-boot-process" rel="nofollow">http://duartes.org/gustavo/blog/post/kernel-boot-process</a></font></span><p><font size=1><u><a href="reply?id=3828392&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3828218 href="vote?for=3828218&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828218></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dclowd9901">dclowd9901</a> 18 hours ago  | <a href="item?id=3828218">link</a></span></div><br>
<span class="comment"><font color=#000000>One thing has always perplexed me: What is the very first thing that happens? The thing that tells the firmware to initialize? In other words, how does does the firmware "know" to initialize?</font></span><p><font size=1><u><a href="reply?id=3828218&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3829276 href="vote?for=3829276&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829276></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=mbell">mbell</a> 14 hours ago  | <a href="item?id=3829276">link</a></span></div><br>
<span class="comment"><font color=#000000>At a hardware level a bunch of things happen on a modern motherboard.  A more simplistic example would be a cell phone or any SoC (System on a Chip) or microcontroller device.  What follows is still very simplified and generic though.<p>When power is applied there is a PMIC (Power Management IC).  This is a hardware integrated circuit that provides various features, among them are are the timings needed to power on the device.  A power on sequence consists of the PMIC first receiving its primary power from a regulator on the system board, this usually triggers a hardware timer that waits a bit for the voltage to stabilize.  Then the PMIC triggers the power supplies to other components.  A modern SoC may need 3 or 4 different power supplies and these need to be 'enabled' in a specific order with specific timings.  All this is managed by the hardware in the PMIC and would be the "trigger" that tells the SoC to fire up or more realistically just what is required to fire it up properly.<p>Once the voltages are supplied to the SoC several other things take place before the CPU comes online.  Usually there is a bit of circuitry on the SoC called a PLL (Phase Locked Loop) that locks onto the system clock to avoid fluctuation.  This can take some time as the system clock stabilizes after boot but even a stable stock takes a bit of time to lock onto.  The PLL sub system also generates the various clocks needed by the SoC.  The master clock from the system board may only be ~25Mhz but the PLL needs to generate various clocks for different parts of the SoC, maybe 1Ghz for the CPU, 100Mhz for the I/O, etc.  Some SoC processor may actually start at a much slower clock rate and setup the PLL for its desired clock rate as part of the initialization process.  Still others may have a very slow clock on chip that the SoC starts from to initialize itself before switching to the external clock.<p>Once all that is done, the CPU comes online.  Sometimes this is prefaced by some support circuitry or microcode.  For example it may fetch some data from memories off the SoC.  Either way the CPU just starts executing at a known location so it all just starts with a single instruction.  Usually you'd have a bootloader at the startup location that initializes just enough of the SoC to bring online additional functions.  A common action is to setup external flash / ram then chain to a much more complex bootloader from the external flash.<p>In a modern x86 system there is more that goes on and much of what I described is more distributed to various components on the motherboard.  Much of the initial startup is handled by what amounts to a microcontroller that lives inside the northbridge.  It handles initial startup tasks before bringing the CPU online.</font></span><p><font size=1><u><a href="reply?id=3829276&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3828401 href="vote?for=3828401&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828401></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=Hoff">Hoff</a> 17 hours ago  | <a href="item?id=3828401">link</a></span></div><br>
<span class="comment"><font color=#000000>In one box I'm working with, a switch (whether mechanical, or an outboard management processor, a received network packet with a "smart" NIC, or otherwise) triggers a pin or signal on the processor.<p>This signal causes the processor to then perform its own start up, which then causes various processor-specific initialization, and then causing the processor to load its soft-loaded firmware code from a SROM, and to jump to the start address for the console firmware.<p>The firmware then performs more configuration and testing, and which eventually gets around to allowing the user to enter commands, or to trigger an operating system bootstrap by finding and loading blocks from a specified boot device.<p>The SROM implementation allows the firmware code to be more easily upgraded.<p>This sequence is usually covered in a processor technical manual, for whichever combination of processor and main board you're looking at.</font></span><p><font size=1><u><a href="reply?id=3828401&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3828813 href="vote?for=3828813&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828813></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sliverstorm">sliverstorm</a> 16 hours ago  | <a href="item?id=3828813">link</a></span></div><br>
<span class="comment"><font color=#000000>Think of an old-fashioned tape computer. You feed the computer the tape, which causes the computer to do this or that in memory.<p>Initially, it knows nothing, but it is built to read in the tape, starting from the beginning. Then from there, what it reads on the tape controls what happens next.</font></span><p><font size=1><u><a href="reply?id=3828813&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3829027 href="vote?for=3829027&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829027></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dclowd9901">dclowd9901</a> 15 hours ago  | <a href="item?id=3829027">link</a></span></div><br>
<span class="comment"><font color=#000000>This, more than any other explanation, has helped me understand what's happening. Thanks much.</font></span><p><font size=1><u><a href="reply?id=3829027&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3829421 href="vote?for=3829421&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829421></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=drostie">drostie</a> 14 hours ago  | <a href="item?id=3829421">link</a></span></div><br>
<span class="comment"><font color=#000000>You've gotten a lot of comments on this, mostly because you've asked a very open-ended question. Let me try to offer my interpretation to the question.<p>There are a bunch of active parts on the mainboard even when the power is off -- for example, your clock. You wouldn't want to reset the clock every time you power off, or even every time you unplug -- it lives on a battery while you're not looking. Some things like BIOS passwords also lives on that same battery -- so, at least, it used to be the case that when you wanted to bypass someone's boot password, you would break into the case, pop out the battery, unplug, wait five minutes to make sure that everything is dead, pop the battery back in, and start up from scratch. It's been a while since I last had to do that though. ^_^<p>The moment you press the power button, what you are really doing is completing a circuit between two pins exposed on the mainboard. Your power button literally has wires connecting to a socket which sits atop those pins. One of those pins has a voltage, one of them expects it, so the very first thing that happens is, "a burst of current flows from pin A to pin B." The motherboard is an electronic system which is already "on", and which is expecting this and waiting for it. (And you can trigger it with a screwdriver in a pinch.)<p>So that is "the thing that tells the firmware to initialize." To be fair, it might have a whole cascade of effects -- it might have to trigger the power supply or so, has to get the fan on the CPU running and then the CPU itself needs to start from a predictable state, and the mainboard needs to load its own firmware -- but the basic idea here is to just have a circuit which knows what this one little current pulse means.</font></span><p><font size=1><u><a href="reply?id=3829421&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3828334 href="vote?for=3828334&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828334></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jbert">jbert</a> 17 hours ago  | <a href="item?id=3828334">link</a></span></div><br>
<span class="comment"><font color=#000000>Old 8bit processors just start with the instruction pointer at a known value (e.g. 0x0000).<p>If you arrange matters so that until the CPU tells you differently, memory address 0x0000 holds your firmware, then all can proceed from there.</font></span><p><font size=1><u><a href="reply?id=3828334&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3830795 href="vote?for=3830795&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830795></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=mbell">mbell</a> 7 hours ago  | <a href="item?id=3830795">link</a></span></div><br>
<span class="comment"><font color=#000000>&#62; Old 8bit processors just start with the instruction pointer at a known value (e.g. 0x0000).<p>So do new 8bit processors and almost all processors, x86 cpus still have a reset vector, its 0xFFFFFFF0.</font></span><p><font size=1><u><a href="reply?id=3830795&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3828647 href="vote?for=3828647&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828647></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=joshu">joshu</a> 17 hours ago  | <a href="item?id=3828647">link</a></span></div><br>
<span class="comment"><font color=#000000>Wouldnt 0 cause problems? You accidentally branch to null, machine reboots.</font></span><p><font size=1><u><a href="reply?id=3828647&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3828861 href="vote?for=3828861&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828861></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=msarnoff">msarnoff</a> 16 hours ago  | <a href="item?id=3828861">link</a></span></div><br>
<span class="comment"><font color=#000000>In C, a "null pointer" (NULL, (void *)0, etc.) does not necessarily correspond to an address with all bits zero.[1] The compiler translates any pointer constants with a value of 0 to an invalid address appropriate for that machine.<p>I haven't verified this, but I could see this being used by microcontroller compilers, where address 0x0000 is often a memory-mapped register.<p>[1] <a href="http://c-faq.com/null/index.html" rel="nofollow">http://c-faq.com/null/index.html</a></font></span><p><font size=1><u><a href="reply?id=3828861&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3830210 href="vote?for=3830210&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830210></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dkersten">dkersten</a> 10 hours ago  | <a href="item?id=3830210">link</a></span></div><br>
<span class="comment"><font color=#000000>Also the C null pointer on modern system is the logical (virtual memory) address which is not necessarily mapped to 0x0 physical address - in fact, to trap the null pointer access, this page would be left unmapped so the OS receives a page fault. This means that before virtual memory is set up (or if a page is mapped for logical address 0x0), 0x0 is a perfectly valid memory location, both for data storage and executing instructions from. Basically, the null pointer "error" is trapped by the OS at a higher level.</font></span><p><font size=1><u><a href="reply?id=3830210&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3829883 href="vote?for=3829883&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829883></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=jbert">jbert</a> 12 hours ago  | <a href="item?id=3829883">link</a></span></div><br>
<span class="comment"><font color=#000000>I used 0 as the example because the 8bit chip I was thinking of (the Z80) used that. But the exact address isn't too relevant, the basic idea is that the CPU has a default state for the instruction pointer, and can get things going from there.<p><a href="http://lateblt.tripod.com/z80proj1.htm" rel="nofollow">http://lateblt.tripod.com/z80proj1.htm</a><p>"What's Happening?<p>The computer begins with the CPU. When the CPU starts running (which basically happens as soon as it receives power and is reset with the RESET pin), it begins to pull instructions from memory and execute them. Where it starts in memory depends on the individual CPU, but in the case of the Z80, it simply begins at memory address 0, instead of using a reset vector like many other CPUs do. This means that any computer using the Z80 <i>must</i> have a ROM chip at memory address 0 which gives the initial start-up instructions to the Z80."<p>Also - the memory map during boot time is broadly unrelated to the per-process memory map during OS runtime. Also, if you branch to unexpected memory addresses, you deserve all you get. Also, on a processor with privilege isolation, your ring3 user process can't just cause a reboot.</font></span><p><font size=1><u><a href="reply?id=3829883&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3828771 href="vote?for=3828771&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828771></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sliverstorm">sliverstorm</a> 16 hours ago  | <a href="item?id=3828771">link</a></span></div><br>
<span class="comment"><font color=#000000>Wouldn't accidentally branching to null <i>always</i> cause problems?</font></span><p><font size=1><u><a href="reply?id=3828771&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3829641 href="vote?for=3829641&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829641></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=MBCook">MBCook</a> 13 hours ago  | <a href="item?id=3829641">link</a></span></div><br>
<span class="comment"><font color=#000000>No, it may be just a memory address like any other (it can also be a register or other special address). The reason it's a problem in normal programs is because there usually isn't code there (and with memory protection, you probably aren't allowed to access that space, which is the error you often see).<p>The CPU doesn't care if the address is all 0s, that's not special to the CPU. So when it turns on it just starts executing at some hard-wired address. That could be 0x0000, 0x8000, or it could be something really random like 0x48C4. Somewhere in the chip's documentation it says what the address is. Once the CPU has power, it loads the first instruction from that address, and then it executes everything as normal.<p>So you wire up the computer so that some little piece of ROM (for example the BIOS) sits at that address. When the chip turns on, you know what instructions it will start executing.<p>Once things are going, you could set things up to be more complicated (such toggling pins to signal the ROM chip to stop listening so you could map normal RAM into that address), but that's the basic idea.</font></span><p><font size=1><u><a href="reply?id=3829641&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=200></td><td valign=top><center><a id=up_3829772 href="vote?for=3829772&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829772></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sliverstorm">sliverstorm</a> 13 hours ago  | <a href="item?id=3829772">link</a></span></div><br>
<span class="comment"><font color=#000000>I am aware of the finer details, I am just assuming that branching to somewhere you didn't want to go is generally a Bad Thing (tm) ;)<p>(Unless you get lucky, and it's a branch-predict, that turns out to be an incorrect predict, and then flushes and re-branches into valid memory...)</font></span><p><font size=1><u><a href="reply?id=3829772&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3828308 href="vote?for=3828308&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828308></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=andyjohnson0">andyjohnson0</a> 18 hours ago  | <a href="item?id=3828308">link</a></span></div><br>
<span class="comment"><font color=#000000><i></i><i>The thing that tells the firmware to initialize? In other words, how does does the firmware "know" to initialize?</i><i></i><p>The firmware is just software that is executed by the CPU. The question is, how does the CPU know how to find and execute execute the firmware<p>From the article: <i></i><i>The motherboard ensures that the instruction at the reset vector is a jump to the memory location mapped to the BIOS entry point.</i><i></i><p>The motherboard hardware ensures that the firmware is mapped into memory and that the reset vector points to its entry point. The CPU loads the reset vector into the EIP and starts to run the firmware.</font></span><p><font size=1><u><a href="reply?id=3828308&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3828442 href="vote?for=3828442&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828442></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=samaraga">samaraga</a> 17 hours ago  | <a href="item?id=3828442">link</a></span></div><br>
<span class="comment"><font color=#000000>But what will be the procedure when the computer is booted for the very first time(out of the factory, anew)?</font></span><p><font size=1><u><a href="reply?id=3828442&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3828603 href="vote?for=3828603&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828603></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=carguy1983">carguy1983</a> 17 hours ago  | <a href="item?id=3828603">link</a></span></div><br>
<span class="comment"><font color=#000000>From wikipedia:<p><i>That is to say, the reset vector is a pointer or address where the CPU should always begin as soon as it is able to execute instructions.</i><p>In other words, people who have lots of experience in this stuff gloss over the fact that "reset vector" doesn't mean reset at all, it actually means "whenever it's turned on, it jumps to this address and starts executing instructions".</font></span><p><font size=1><u><a href="reply?id=3828603&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3828568 href="vote?for=3828568&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828568></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=pgeorgi">pgeorgi</a> 17 hours ago  | <a href="item?id=3828568">link</a></span></div><br>
<span class="comment"><font color=#000000>It will run whatever is in the flash chip. That one is generally written to outside the system's control.<p>On modern PC mainboards with SPI flash (8 pins), there's often a set of pins (also 8) in close proximity to the flash chip - attach an external flasher to that, and you can write the flash while the PC is turned off.<p>The alternative would be to write the flash before it's put on the board, but which method is chosen is an implementation detail.</font></span><p><font size=1><u><a href="reply?id=3828568&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=160></td><td valign=top><center><a id=up_3828620 href="vote?for=3828620&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828620></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=carguy1983">carguy1983</a> 17 hours ago  | <a href="item?id=3828620">link</a></span></div><br>
<span class="comment"><font color=#000000>You're thinking about 10 steps ahead of this guy.  He's just confused about the 'reset' vector being hit even when the computer is NOT explicitly reset, just when it's turned on for the first time, or powered on after being off.</font></span><p><font size=1><u><a href="reply?id=3828620&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3828730 href="vote?for=3828730&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828730></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=chocolatebunny"><font color=#3c963c>chocolatebunny</font></a> 16 hours ago  | <a href="item?id=3828730">link</a></span></div><br>
<span class="comment"><font color=#000000>The chips are programmed before they are put on the board.</font></span><p><font size=1><u><a href="reply?id=3828730&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3828234 href="vote?for=3828234&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828234></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ori_b">ori_b</a> 18 hours ago  | <a href="item?id=3828234">link</a></span></div><br>
<span class="comment"><font color=#000000>It's built into the circuits.</font></span><p><font size=1><u><a href="reply?id=3828234&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3828969 href="vote?for=3828969&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828969></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=msarnoff">msarnoff</a> 15 hours ago  | <a href="item?id=3828969">link</a></span></div><br>
<span class="comment"><font color=#000000>To be more specific: the CPU has circuitry that, upon power-up, either a) sets the program counter to a specific initial address (like all zeros), or b) fetches a word from a specific location in read-only memory (the "reset vector") and loads it into the program counter.<p>Typically, the initial program counter value points to startup code in read-only memory. (On PCs, "read-only memory" is the BIOS, on most 8-bit game consoles, it's the chip in the game cartridge, on microcontrollers it's the PROM or flash memory where the firmware is stored, etc.)<p>It wouldn't make much sense to start executing code out of RAM on startup because the contents of RAM will be random garbage. Powering up an old game console without a cartridge does something similar--when there is no ROM chip physically connected to the CPU, all attempts to access ROM return 0x00 or 0xFF or something random, and the CPU just executes bogus instructions until it's powered off.</font></span><p><font size=1><u><a href="reply?id=3828969&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3829354 href="vote?for=3829354&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829354></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=ori_b">ori_b</a> 14 hours ago  | <a href="item?id=3829354">link</a></span></div><br>
<span class="comment"><font color=#000000>It's even more interesting than that. One of the things that the BIOS has to do, if I recall correctly, is to set up the memory controller. Until it does that, it's only able to execute out of registers and cache, no RAM.<p>If you're interested, Coreboot (an open source BIOS replacement) has interesting information on this.</font></span><p><font size=1><u><a href="reply?id=3829354&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3828885 href="vote?for=3828885&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828885></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sciurus">sciurus</a> 16 hours ago  | <a href="item?id=3828885">link</a></span></div><br>
<span class="comment"><font color=#000000>Gustavo Duarte has a lot of well-written (and illustrated!) blog posts. With a little bit of effort they could be combined into a nice ebook.</font></span><p><font size=1><u><a href="reply?id=3828885&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3829578 href="vote?for=3829578&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829578></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=iRobot">iRobot</a> 13 hours ago  | <a href="item?id=3829578">link</a></span></div><br>
<span class="comment"><font color=#000000>A Few times I have prised out the Eprom off the motherboard and re-flashed it with my own small programs for a super-fast embedded system or game. (the eprom is ussally the only socketed item on the motherboard apart from the CPU)<p>The main problem is not overwritting the BIOS routines which, unless you rewrite them all (like linux of windows do) you still need to use (nothing here has really changed since 1981 and you can use anything that produces 16 bit code such as Turbo C, Assembler or Pascal)<p>Usually there is plenty of spare EPROM space you can find and as your running in 16 bit mode this is enough for something like space invaders :-)<p>PC Motherboards can usually be blagged for nothing, so its a great way to do low level experimenting.</font></span><p><font size=1><u><a href="reply?id=3829578&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3829059 href="vote?for=3829059&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3829059></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=agumonkey">agumonkey</a> 15 hours ago  | <a href="item?id=3829059">link</a></span></div><br>
<span class="comment"><font color=#000000>For alternative knowledge, check Coreboot aka linux as BIOS.<p>Here's a video talking about inner workings of the boot process <a href="http://www.youtube.com/watch?v=X72LgcMpM9k#t=438s" rel="nofollow">http://www.youtube.com/watch?v=X72LgcMpM9k#t=438s</a><p>url linked at 7min, but it's actually 3x15min talks. have fun watching them all :p</font></span><p><font size=1><u><a href="reply?id=3829059&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><img src="http://ycombinator.com/images/s.gif" height=1 width=14></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"></span></div><span class="comment">[deleted]</span></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=40></td><td valign=top><center><a id=up_3828472 href="vote?for=3828472&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3828472></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=nknight">nknight</a> 17 hours ago  | <a href="item?id=3828472">link</a></span></div><br>
<span class="comment"><font color=#000000>I think my answer if asked this question in an interview would be "A trainwreck of legacy (in)compatibility layers designed to keep grandpa from losing his teeth after he's been dead twenty years.".</font></span><p><font size=1><u><a href="reply?id=3828472&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=80></td><td valign=top><center><a id=up_3830236 href="vote?for=3830236&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830236></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=dkersten">dkersten</a> 10 hours ago  | <a href="item?id=3830236">link</a></span></div><br>
<span class="comment"><font color=#000000>Now I'm curious what the question was...</font></span><p><font size=1><u><a href="reply?id=3830236&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=120></td><td valign=top><center><a id=up_3831037 href="vote?for=3831037&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831037></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=iRobot">iRobot</a> 6 hours ago  | <a href="item?id=3831037">link</a></span></div><br>
<span class="comment"><font color=#000000>My answer would be 426.4</font></span><p><font size=1><u><a href="reply?id=3831037&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3831002 href="vote?for=3831002&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3831002></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=sebastianavina">sebastianavina</a> 6 hours ago  | <a href="item?id=3831002">link</a></span></div><br>
<span class="comment"><font color=#5a5a5a>nice</font></span><p><font size=1><u><a href="reply?id=3831002&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr><tr><td><table border=0><tr><td><img src="http://ycombinator.com/images/s.gif" height=1 width=0></td><td valign=top><center><a id=up_3830254 href="vote?for=3830254&dir=up&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31"><img src="http://ycombinator.com/images/grayarrow.gif" border=0 vspace=3 hspace=2></a><span id=down_3830254></span></center></td><td class="default"><div style="margin-top:2px; margin-bottom:-10px; "><span class="comhead"><a href="user?id=InclinedPlane">InclinedPlane</a> 10 hours ago  | <a href="item?id=3830254">link</a></span></div><br>
<span class="comment"><font color=#aeaeae>(Normally I try to avoid joke posts, but I'll just leave this here and let people up or down vote to their preference.)<p>How a computer boots up:<p>LI1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010</font></span><p><font size=1><u><a href="reply?id=3830254&whence=%69%74%65%6d%3f%69%64%3d%33%38%32%37%38%35%31">reply</a></u></font></td></tr></table></td></tr></table><br><br>
</td></tr><tr><td><img src="http://ycombinator.com/images/s.gif" height=10 width=0><table width="100%" cellspacing=0 cellpadding=1><tr><td bgcolor=#ff6600></td></tr></table><br>
<center><span class="yclinks"><a href="lists">Lists</a> | <a href="rss">RSS</a> | <a href="http://ycombinator.com/bookmarklet.html">Bookmarklet</a> | <a href="http://ycombinator.com/newsguidelines.html">Guidelines</a> | <a href="http://ycombinator.com/newsfaq.html">FAQ</a> | <a href="http://ycombinator.com/newsnews.html">News News</a> | <a href="item?id=363">Feature Requests</a> | <a href="http://ycombinator.com">Y Combinator</a> | <a href="http://ycombinator.com/apply.html">Apply</a> | <a href="http://ycombinator.com/lib.html">Library</a></span><br><br>
<form method=get action="http://www.hnsearch.com/search#request/all">Search: <input type=text name="q" value="" size=17></form><br>
</center></td></tr></table></center></body></html>